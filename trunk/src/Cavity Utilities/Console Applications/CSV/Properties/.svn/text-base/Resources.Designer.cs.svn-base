//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.32559
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cavity.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cavity.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Entries: {0:0,0}.
        /// </summary>
        internal static string CsvEntryCount {
            get {
                return ResourceManager.GetString("CsvEntryCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ------------------------------
        ///File:    {0}.
        /// </summary>
        internal static string CsvFileInfo {
            get {
                return ResourceManager.GetString("CsvFileInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: {1}.
        /// </summary>
        internal static string ExceptionFormat {
            get {
                return ResourceManager.GetString("ExceptionFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index value of {0} is beyond the length of &quot;{1}&quot;..
        /// </summary>
        internal static string ExceptionMessage_IndexAfterValueLength {
            get {
                return ResourceManager.GetString("ExceptionMessage_IndexAfterValueLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length value of {0} is shorter than the length of the value &quot;{1}&quot;..
        /// </summary>
        internal static string ExceptionMessage_LengthShorterThanValueLength {
            get {
                return ResourceManager.GetString("ExceptionMessage_LengthShorterThanValueLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The index value of {0} is negative..
        /// </summary>
        internal static string ExceptionMessage_NegativeIndex {
            get {
                return ResourceManager.GetString("ExceptionMessage_NegativeIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length value of {0} is negative..
        /// </summary>
        internal static string ExceptionMessage_NegativeLength {
            get {
                return ResourceManager.GetString("ExceptionMessage_NegativeLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The start value of {0} is negative..
        /// </summary>
        internal static string ExceptionMessage_NegativeStartIndex {
            get {
                return ResourceManager.GetString("ExceptionMessage_NegativeStartIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The start value of {0} is beyond the length of &quot;{1}&quot;..
        /// </summary>
        internal static string ExceptionMessage_StartIndexAfterValueLength {
            get {
                return ResourceManager.GetString("ExceptionMessage_StartIndexAfterValueLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The start + length value of {0} + {1} is beyond the length of &quot;{2}&quot;..
        /// </summary>
        internal static string ExceptionMessage_StartIndexAndLengthAfterValueLength {
            get {
                return ResourceManager.GetString("ExceptionMessage_StartIndexAndLengthAfterValueLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
        /// </summary>
        internal static string IndexOutOfRangeException_Message {
            get {
                return ResourceManager.GetString("IndexOutOfRangeException_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The upper bound must be greater than the lower bound..
        /// </summary>
        internal static string ObjectExtensionMethods_IsBoundedBy_Message {
            get {
                return ResourceManager.GetString("ObjectExtensionMethods_IsBoundedBy_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press any key to exit....
        /// </summary>
        internal static string PressAnyKeyToExit {
            get {
                return ResourceManager.GetString("PressAnyKeyToExit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of columns in the header do match match the number of columns in line {0}..
        /// </summary>
        internal static string ReadEntry_FormatException {
            get {
                return ResourceManager.GetString("ReadEntry_FormatException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Verifies CSV files.
        ///
        ///Usage: CSV names
        ///
        ///  names         Specifies a list of one or more files.
        ///                Wildcards may be used to process multiple files.
        ///
        ///Examples:
        ///                Process the example text file:
        ///		CSV C:\Temp\example.csv
        ///
        ///                Process all text files in Temp directory only:
        ///		CSV C:\Temp\*.txt
        ///
        ///                Process all csv files in Temp and child directories:
        ///		CSV C:\Temp\**\*.csv.
        /// </summary>
        internal static string UsageHelp {
            get {
                return ResourceManager.GetString("UsageHelp", resourceCulture);
            }
        }
    }
}
